#!/bin/sh
# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Prepares image resources into output folder.

# Composition settings
BACKGROUND_COLOR=white

# The files that uses different scaling parameter.
BACKGROUND_IMAGE=Background.png
CHARGE_BACKGROUND_IMAGE=reserve_charging_background.png

# Files with different background
CHARGE_ASSETS_PREFIX="reserve_charging"

# Output file name.
BMPBLK_OUTPUT="bmpblk.bin"
YAML_OUTPUT="DEFAULT.yaml"

SCRIPT_BASE="$(dirname $(readlink -f "$0"))"
BUILD_DIR="$(readlink -f "$SCRIPT_BASE/../build")"

# Base processing utility, built by vboot_reference
BMPLKU="bmpblk_utility"

die() {
  echo "ERROR: $*" >&2
  exit 1
}

convert_to_bmp3() {
  local folder="$1"
  local param="$2"
  shift
  shift

  # convert_to_bmp3.py takes '--scale' while ImageMagic takes '-scale'.
  [ -n "$param" ] && param="-$param"

  $SCRIPT_BASE/convert_to_bmp3.py $param --outdir "$folder" "$@"
}

main() {
  local profile="$1"
  local git_dirty="$(git diff --shortstat)"
  local git_version="$(git show -s --format="%h")"
  local output="$BUILD_DIR/$1"
  local scale_param="" background_scale_param="" replace_files=""
  local stage_dir="$BUILD_DIR/.stage"
  local dpi=""
  local base locale X archive

  [ -z "$git_dirty" ] || git_version+="_mod"

  # TODO(hungte) Derive and calculate profile params automatically.
  # TODO(hungte) Allow overriding stage directory for 2x resolution files.

  # Currently we use image resources originally designed for 1366x768, and
  # re-scale to different aspects on demand.
  case "$profile" in
    std )
      # Standard: profile with all default values.
      true
      ;;

    # Native profiles

    snow )
      # 1366x768, and can only boot recovery by SD card or USB2 [not USB3].
      background_scale_param="-scale 1366x768!"
      replace_files="insert=insert_sd_usb2"
      ;;

    spring )
      # 1366x768.
      # Can only boot recovery by USB. (No card reader, or not able to recover
      # from card reader.)
      background_scale_param="-scale 1366x768!"
      replace_files="insert=insert_usb BadSD=dummy RemoveDevices=RemoveUSB"
      ;;

    # Stretched profiles

    falco | peppy | wolf )
      # Using VESA graphics mode 1024x768 (0x0117), streched to 1366x768 panel.
      # With card reader. USB3 ports will run in USB2 mode for recovery mode.
      scale_param="-scale 75%x100%"
      background_scale_param="-scale 1024x768!"
      ;;

    parrot | butterfly )
      # Using VESA graphics mode 1024x768 (0x0117), streched to 1366x768 panel.
      # Can only boot recovery by USB. (No card reader, or not able to recover
      # from card reader.)
      scale_param="-scale 75%x100%"
      background_scale_param="-scale 1024x768!"
      replace_files="insert=insert_usb BadSD=dummy RemoveDevices=RemoveUSB"
      ;;

    stout  )
      # Using VESA graphics mode 1024x768 (0x0117), streched to 1366x768 panel.
      # Can only boot recovery by USB2 [not USB3]. (No card reader, or not able
      # to recover from card reader.)
      scale_param="-scale 75%x100%"
      background_scale_param="-scale 1024x768!"
      replace_files="insert=insert_usb2 BadSD=dummy RemoveDevices=RemoveUSB"
      ;;

    link )
      # Non-standard Graphics mode 1280x850,aspect ratio 8x5 panels.
      scale_param="-scale 94%x99%" # 99% = 110% * (1.6 / 1.78)
      background_scale_param="-scale 1280x850!"
      ;;

    peach_pit )
      # 1366x768, and can boot recovery from any SD or USB interface
      background_scale_param="-scale 1366x768!"
      ;;

    * )
      die "Sorry, unknown profile $profile."
  esac

  # Prepare output folder
  rm -rf "$output"
  mkdir -p "$output"

  # Prepare images in current and assets folder
  for X in *.png assets$dpi/*.png; do
    case "${X##*/}" in
      "$BACKGROUND_IMAGE" | "$CHARGE_BACKGROUND_IMAGE" )
        convert_to_bmp3 "$output" "$background_scale_param" "$X"
        ;;
      "$CHARGE_ASSETS_PREFIX"* )
        convert_to_bmp3 "$output" "$scale_param" --background 000000 "$X"
        ;;
      * )
        convert_to_bmp3 "$output" "$scale_param" "$X"
        ;;
    esac
  done
  stage_dir="$stage_dir$dpi"
  [ -d "$stage_dir" ] || die "Missing staging folder: $stage_dir"

  # Prepares strings and localized images.
  echo "Preparing common strings..."
  base="$stage_dir"
  convert_to_bmp3 "$output" "$scale_param" $base/*.png

  echo "Preparing localized messages... $LOCALES"
  base="$stage_dir/locale"
  if [ -z "$LOCALES" ]; then
    # Collect all locales
    for X in $(cd $base; ls); do
      if [ -d "$base/$X" ]; then
        LOCALES="${LOCALES}${X} "
      fi
    done
    echo "Found locales: $LOCALES"
  fi
  for locale in $LOCALES; do
    # Prepare all locales.
    convert_to_bmp3 "$output/locale/$locale" "$scale_param" $base/$locale/*.png
  done

  if [ -n "$replace_files" ]; then
    echo "Replacing files..."
    echo "$replace_files" | tr ' ' '\n' | while read X; do
      local Xdest="${X%%=*}" Xsrc="${X##*=}" Xfile=""
      echo " $Xsrc => $Xdest"
      for Xfile in $(find "$output" -name "$Xsrc.bmp"); do
        echo "  * $Xfile"
        mv "$Xfile" "$(dirname "$Xfile")/$Xdest.bmp"
      done
    done
  fi

  echo "Preparing fonts..."
  base="$stage_dir/font"
  convert_to_bmp3 "$output/font" "$scale_param" $base/*.png
  bmpblk_font --outfile "$output/hwid_fonts.font" "$output"/font/*.bmp

  # Create YAML file.
  (cd "$output" && $SCRIPT_BASE/make_default_yaml $LOCALES)

  # Compile bitmap block file.
  archive="chromeos-bmpblk-$profile-${git_version}.tbz2"
  (cd "$output" && ${BMPLKU} -c $YAML_OUTPUT $BMPBLK_OUTPUT &&
   tar acf $archive "$BMPBLK_OUTPUT" )
  echo ""
  echo "Bitmap block file generated in: $output/$BMPBLK_OUTPUT"
  echo "Archive file to upload: $output/$archive"
  echo "To preview, run ../bitmap_viewer $output/$YAML_OUTPUT"
  ls -l "$output/$BMPBLK_OUTPUT"
}


if ! type ${BMPLKU} >/dev/null 2>&1; then
    util_path="$(readlink -f $(dirname $0)/../../vboot_reference/build/utility)"
    if [ -x "${util_path}/${BMPLKU}" ]; then
      PATH+=":${util_path}"
    else
      die "${BMPLKU} is not in the path"
    fi
fi

set -e
main "$@"

