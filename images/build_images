#!/bin/sh
# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Prepares image resources into output folder.

# Composition settings
BACKGROUND_COLOR=white

# The only file that uses different scaling parameter.
BACKGROUND_IMAGE=Background.png

# Output file name.
BMPBLK_OUTPUT="bmpblock.bin"

SCRIPT_BASE="$(dirname $(readlink -f "$0"))"

die() {
  echo "ERROR: $*" >&2
  exit 1
}

convert_to_bmp3() {
  local folder="$1"
  local param="$2"
  shift
  shift

  # convert_to_bmp3.py takes '--scale' while ImageMagic takes '-scale'.
  [ -n "$param" ] && param="-$param"

  $SCRIPT_BASE/convert_to_bmp3.py $param --outdir "$folder" "$@"
}

main() {
  local profile="$1"
  local output="out_$1"
  local scale_param="" background_scale_param="" replace_files=""
  local base locale X

  # TODO(hungte) Derive and calculate profile params automatically.

  # Currently we use image resources originally designed for 1366x768, and
  # re-scale to different aspects on demand.
  case "$profile" in
    std )
      # Standard: profile with all default values.
      true
      ;;

    # Native profiles

    snow )
      # 1366x768, and can only boot recovery by SD card or USB2 [not USB3].
      background_scale_param="-scale 1366x768!"
      replace_files="insert=insert_sd_usb2"
      ;;

    # Stretched profiles

    parrot | butterfly )
      # Using VESA graphics mode 1024x768 (0x0117), streched to 1366x768 panel.
      # Can only boot recovery by USB. (No card reader, or not able to recover
      # from card reader.)
      scale_param="-scale 75%x100%"
      background_scale_param="-scale 1024x768!"
      replace_files="insert=insert_usb BadSD=dummy RemoveDevices=RemoveUSB"
      ;;

    stout  )
      # Using VESA graphics mode 1024x768 (0x0117), streched to 1366x768 panel.
      # Can only boot recovery by USB2 [not USB3]. (No card reader, or not able
      # to recover from card reader.)
      scale_param="-scale 75%x100%"
      background_scale_param="-scale 1024x768!"
      replace_files="insert=insert_usb2 BadSD=dummy RemoveDevices=RemoveUSB"
      ;;

    link )
      # Non-standard Graphics mode 1280x850,aspect ratio 8x5 panels.
      scale_param="-scale 94%x99%" # 99% = 110% * (1.6 / 1.78)
      background_scale_param="-scale 1280x850!"
      ;;

    * )
      die "Sorry, unknown profile $profile."
  esac

  # Prepare output folder
  rm -rf "$output"
  mkdir -p "$output"

  # Prepare images in current folder
  for X in *.png assets/*.png; do
    if [ "$X" = "$BACKGROUND_IMAGE" ]; then
      convert_to_bmp3 "$output" "$background_scale_param" "$X"
    else
      convert_to_bmp3 "$output" "$scale_param" "$X"
    fi
  done

  # Prepares strings and localized images. All these images were rendered by
  # pango-view and should not have transparency, so we specify flatten="" to
  # speed up.
  echo "Preparing common strings..."
  base="../strings"
  convert_to_bmp3 "$output" "$scale_param" $base/*.png

  echo "Preparing localized messages... $LOCALES"
  base="../strings/localized_text"
  if [ -z "$LOCALES" ]; then
    # Collect all locales
    for X in $(cd $base; ls); do
      if [ -d "$base/$X" ]; then
        LOCALES="${LOCALES}${X} "
      fi
    done
    echo "Found locales: $LOCALES"
  fi
  for locale in $LOCALES; do
    # Prepare all locales.
    convert_to_bmp3 "$output/locale/$locale" "$scale_param" $base/$locale/*.png
  done

  if [ -n "$replace_files" ]; then
    echo "Replacing files..."
    echo "$replace_files" | tr ' ' '\n' | while read X; do
      local Xdest="${X%%=*}" Xsrc="${X##*=}" Xfile=""
      echo " $Xsrc => $Xdest"
      for Xfile in $(find "$output" -name "$Xsrc.bmp"); do
        echo "  * $Xfile"
        mv "$Xfile" "$(dirname "$Xfile")/$Xdest.bmp"
      done
    done
  fi

  echo "Preparing fonts..."
  base="../strings/font"
  convert_to_bmp3 "$output/font" "$scale_param" $base/*.png
  bmpblk_font --outfile "$output/hwid_fonts.bin" "$output"/font/*.bmp

  # Create YAML file.
  (cd "$output" && ../make_default_yaml $LOCALES)

  # Compile bitmap block file.
  (cd "$output" && bmpblk_utility -c DEFAULT.yaml $BMPBLK_OUTPUT)
  ls -l "$output/$BMPBLK_OUTPUT"
}

set -e
main "$@"

